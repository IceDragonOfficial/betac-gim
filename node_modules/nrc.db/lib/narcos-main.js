"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.db = void 0;
    static add(userData, value) {
        const data = oku();
        if (isNaN(value))
            if (!value)
                throw err("Ekliyeceğim şeyi belirtmelisin.");
        if (typeof value != "number")
            throw err("Ekliyeceğim şey sayı türünden olmalıdır.");
        if (data[userData] === undefined)
            return this.set(userData, value);
        data[userData] += value;
        yazdir(data);
    }
    /**
     *
     * delete
     * @static
     * @param {*} userData
     * @memberof db
     */
    static delete(userData) {
        if (isNaN(userData)) {
            if (!userData)
                throw err("Neyi silmem gerektigini anlamadım.");
        }
        const data = oku();
        if (!data[userData] && data[userData] !== 0)
            throw err("Böyle bir veri yok ki sileyim.");
        delete data[userData];
        yazdir(data);
    }
    /**
     *
     * fetchAll
     * @static
     * @returns {object}
     * @memberof db
     */
    static fetchAll() {
        const data = oku();
        return data;
    }

    static has(userData) {
        const data = oku();
        return data[userData] ? true : false;
    }

    static arrayDeleteVal(userData, value) {
        if (!userData || !value)
            throw err("Parametreleri gir.");
        const data = this.fetch(userData);
        if (!Array.isArray(data))
            throw err("Veri Array olmak zorunda!!!!.");
        if (!this.arrayHas(userData, value))
            throw err("Arrayda böyle veri yok s.");
        const newArr = [];
        data
            .filter((a) => a !== value)
            .forEach((a) => newArr.push(a));
        this.set(userData, newArr);
    }
    /**
     *
     * arrayHas
     * @static
     * @param {string} userData
     * @param {*} value
     * @returns {boolean}
     * @memberof db
    /**
     *
     * objectDeleteKey
     * @static
     * @param {string} userData
     * @param {*} key
     * @memberof db
     */
    static objectDeleteKey(userData, key) {
        if (!userData)
            throw err("Lütfen veriyi belirtin.");
        if (!key)
            throw err("Silinicek veriyi belirtin.");
        const f = this.has(userData);
        if (!f)
            throw err("Böyle bir veri yok.");
        const data = this.fetch(userData);
        if (typeof data != "object" || Array.isArray(data))
            throw err("Belirtilen veri object tipinde bir veri değil.");
        if (!data[key])
            throw err("Belirtilen veride böyle bir key yok.");
        delete data[key];
        this.set(userData, data);
    }
    /**
     *
     * push
     * @static
     * @param {string} userData
     * @param {*} value
     * @memberof db
     */
    static push(userData, value) {
        const data = oku();
        if (!Array.isArray(data[userData]))
            throw err("Girilen değer Array olmak zorundadır.");
        data[userData].push(value);
        yazdir(data);

db.table = table_1.table
